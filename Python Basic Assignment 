Here are the Python solutions for the assignments in the PDF file:

1. String Manipulation & Methods

def string_manipulation(sentence):
    words = sentence.split()
    word_count = len(words)
    reversed_sentence = " ".join(reversed(words))
    title_case = sentence.title()
    replaced_sentence = sentence.replace("a", "@")

    print(f"Word Count: {word_count}")
    print(f"Reversed Sentence: \"{reversed_sentence}\"")
    print(f"Title Case: \"{title_case}\"")
    print(f"Replaced Sentence: \"{replaced_sentence}\"")

# Example usage
string_manipulation("python is an amazing language")

2. Number Guessing Game

import random

def number_guessing_game():
    number = random.randint(1, 100)
    attempts = 7

    for i in range(1, attempts +1):
        guess = int(input(f"Attempts {i}/{attempts}:Guess the number (1-100): "))
        if guess > number:
            print("Too high! Try again.")
        elif guess < number:
            print("Too low! Try again.")
        else:
            print(f"Correct! You guessed it in {i + 1} attempts.")
            return
    print(f"Sorry! The correct number was {number}.")

number_guessing_game()

3. List Processing & Operations

def list_processing(numbers):
    unique_list = list(set(numbers))
    sorted_list = sorted(unique_list)
    max_num = max(sorted_list)
    min_num = min(sorted_list)
    sum_even = sum(num for num in sorted_list if num % 2 == 0)

    print(f"Unique List: {unique_list}")
    print(f"Sorted List: {sorted_list}")
    print(f"Max: {max_num}, Min: {min_num}")
    print(f"Sum of Even Numbers: {sum_even}")

# Example usage
list_processing([5, 3, 8, 3, 10, 2, 8, 5])

4. Dictionary Frequency Counter

def word_frequency(sentence):
    words = sentence.split()
    frequency = {word: words.count(word) for word in set(words)}
    print(frequency)

# Example usage
word_frequency("hello world hello python world")

5. Fibonacci Series (Recursion)

def fibonacci(n, a=0, b=1, sequence=[]):
    if n == 0:
        print(", ".join(map(str, sequence)))
        return
    sequence.append(a)
    fibonacci(n-1, b, a+b, sequence)

# Example usage
fibonacci(6)

6. File Handling Challenge

def file_handling():
    name = input("Enter your name: ")
    age = input("Enter your age: ")

    with open("user_data.txt", "w") as file:
        file.write(f"{name}, Age: {age}")

    print("Data saved successfully!\nReading File...")

    with open("user_data.txt", "r") as file:
        print(file.read())

file_handling()

7. Rock-Paper-Scissors Game

import random

def rock_paper_scissors():
    choices = ["rock", "paper", "scissors"]
    user_choice = input("Enter your choice (rock, paper, scissors): ").lower()
    computer_choice = random.choice(choices)
    
    if  user_choice not in choices:
        print("Invalid choice! Please choose rock,paper,scissors.")
        return
        
    print(f"Computer chose: {computer_choice}")

    if user_choice == computer_choice:
        print("It's a tie!")
    elif (user_choice == "rock" and computer_choice == "scissors") or \
         (user_choice == "paper" and computer_choice == "rock") or \
         (user_choice == "scissors" and computer_choice == "paper"):
        print("You win!")
    else:
        print("You lose!")

rock_paper_scissors()

8. Palindrome Checker

def is_palindrome(word):
    return word == word[::-1]

# Example usage
print(is_palindrome("madam"))

9. Prime Number Checker

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

# Example usage
print(is_prime(11))

10. Leap Year Checker

def is_leap_year(year):
    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)

# Example usage
print(is_leap_year(2024))

Bonus Challenge - Tic-Tac-Toe

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board, player):
    for row in board:
        if all(cell == player for cell in row):
            return True

    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True

    if all(board[i][i] == player for i in range(3)) or \
       all(board[i][2 - i] == player for i in range(3)):
        return True

    return False

def tic_tac_toe():
    board = [[" " for _ in range(3)] for _ in range(3)]
    players = ["X", "O"]
    turn = 0

    for _ in range(9):
        print_board(board)
        row, col = map(int, input(f"Player {players[turn]}, enter row and column (0-2): ").split())
        
        if board[row][col] == " ":
            board[row][col] = players[turn]
            if check_winner(board, players[turn]):
                print_board(board)
                print(f"Player {players[turn]} wins!")
                return
            turn = 1 - turn
        else:
            print("Cell already occupied! Try again.")

    print_board(board)
    print("It's a tie!")

tic_tac_toe()


